// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Employee data
  personalnummer String?
  abteilung      String?

  // Relations
  posts     BlogPost[]
  comments  Comment[]
  files     File[]

  @@map("users")
}

model BlogPost {
  id        String   @id @default(uuid())
  title     String
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  authorId String  @map("author_id")
  author   User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]

  // Optional metadata
  tags     String[]
  category String?

  @@map("blog_posts")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  authorId   String   @map("author_id")
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId     String   @map("post_id")
  post       BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Optional: parent comment for nested comments
  parentId   String?  @map("parent_id")
  parent     Comment? @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies    Comment[] @relation("CommentToComment")

  @@map("comments")
}

model File {
  id          String   @id @default(uuid())
  name        String
  path        String
  mimeType    String   @map("mime_type")
  size        Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  uploaderId  String   @map("uploader_id")
  uploader    User     @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  // Optional metadata
  description String?
  tags        String[]
  category    String?

  @@map("files")
} 